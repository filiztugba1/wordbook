import { useMemo } from "react";
import { Skia } from "../../skia";
import { useDerivedValue, useSharedValue } from "./moduleWrapper";
import { notifyChange } from "./interpolators";
const useBuffer = (size, bufferInitializer, modifier) => {
  const buffer = useMemo(() => new Array(size).fill(0).map(bufferInitializer),
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [size]);
  const transforms = useSharedValue(buffer);
  useDerivedValue(() => {
    buffer.forEach((val, index) => {
      modifier(val, index);
    });
    // Assuming notifyChange is a function that notifies about the change in transforms.
    notifyChange(transforms);
  });
  return transforms;
};
export const useRectBuffer = (size, modifier) => useBuffer(size, () => Skia.XYWHRect(0, 0, 0, 0), modifier);

// Usage for RSXform Buffer
export const useRSXformBuffer = (size, modifier) => useBuffer(size, () => Skia.RSXform(1, 0, 0, 0), modifier);

// Usage for Point Buffer
export const usePointBuffer = (size, modifier) => useBuffer(size, () => Skia.Point(0, 0), modifier);

// Usage for Color Buffer
export const useColorBuffer = (size, modifier) => useBuffer(size, () => Skia.Color("black"), modifier);
//# sourceMappingURL=buffers.js.map