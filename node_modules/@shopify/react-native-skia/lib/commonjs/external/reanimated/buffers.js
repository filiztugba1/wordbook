"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRectBuffer = exports.useRSXformBuffer = exports.usePointBuffer = exports.useColorBuffer = void 0;
var _react = require("react");
var _skia = require("../../skia");
var _moduleWrapper = require("./moduleWrapper");
var _interpolators = require("./interpolators");
const useBuffer = (size, bufferInitializer, modifier) => {
  const buffer = (0, _react.useMemo)(() => new Array(size).fill(0).map(bufferInitializer),
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [size]);
  const transforms = (0, _moduleWrapper.useSharedValue)(buffer);
  (0, _moduleWrapper.useDerivedValue)(() => {
    buffer.forEach((val, index) => {
      modifier(val, index);
    });
    // Assuming notifyChange is a function that notifies about the change in transforms.
    (0, _interpolators.notifyChange)(transforms);
  });
  return transforms;
};
const useRectBuffer = (size, modifier) => useBuffer(size, () => _skia.Skia.XYWHRect(0, 0, 0, 0), modifier);

// Usage for RSXform Buffer
exports.useRectBuffer = useRectBuffer;
const useRSXformBuffer = (size, modifier) => useBuffer(size, () => _skia.Skia.RSXform(1, 0, 0, 0), modifier);

// Usage for Point Buffer
exports.useRSXformBuffer = useRSXformBuffer;
const usePointBuffer = (size, modifier) => useBuffer(size, () => _skia.Skia.Point(0, 0), modifier);

// Usage for Color Buffer
exports.usePointBuffer = usePointBuffer;
const useColorBuffer = (size, modifier) => useBuffer(size, () => _skia.Skia.Color("black"), modifier);
exports.useColorBuffer = useColorBuffer;
//# sourceMappingURL=buffers.js.map