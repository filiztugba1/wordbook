{"ast":null,"code":"'use strict';\n\nexport function valueSetter(mutable, value) {\n  'worklet';\n\n  var forceUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var previousAnimation = mutable._animation;\n  if (previousAnimation) {\n    previousAnimation.cancelled = true;\n    mutable._animation = null;\n  }\n  if (typeof value === 'function' || value !== null && typeof value === 'object' && value.onFrame !== undefined) {\n    var animation = typeof value === 'function' ? value() : value;\n    if (mutable._value === animation.current && !animation.isHigherOrder && !forceUpdate) {\n      animation.callback && animation.callback(true);\n      return;\n    }\n    var initializeAnimation = function initializeAnimation(timestamp) {\n      animation.onStart(animation, mutable.value, timestamp, previousAnimation);\n    };\n    var currentTimestamp = global.__frameTimestamp || _getAnimationTimestamp();\n    initializeAnimation(currentTimestamp);\n    var step = function step(newTimestamp) {\n      var timestamp = newTimestamp < (animation.timestamp || 0) ? animation.timestamp : newTimestamp;\n      if (animation.cancelled) {\n        animation.callback && animation.callback(false);\n        return;\n      }\n      var finished = animation.onFrame(animation, timestamp);\n      animation.finished = true;\n      animation.timestamp = timestamp;\n      mutable._value = animation.current;\n      if (finished) {\n        animation.callback && animation.callback(true);\n      } else {\n        requestAnimationFrame(step);\n      }\n    };\n    mutable._animation = animation;\n    step(currentTimestamp);\n  } else {\n    if (mutable._value === value && !forceUpdate) {\n      return;\n    }\n    mutable._value = value;\n  }\n}","map":{"version":3,"names":["valueSetter","mutable","value","forceUpdate","arguments","length","undefined","previousAnimation","_animation","cancelled","onFrame","animation","_value","current","isHigherOrder","callback","initializeAnimation","timestamp","onStart","currentTimestamp","global","__frameTimestamp","_getAnimationTimestamp","step","newTimestamp","finished","requestAnimationFrame"],"sources":["D:\\react-native-uygulamalarÄ±m\\wordbook\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\valueSetter.ts"],"sourcesContent":["'use strict';\nimport type { AnimationObject, Mutable } from './commonTypes';\n\nexport function valueSetter<Value>(\n  mutable: Mutable<Value>,\n  value: Value,\n  forceUpdate = false\n): void {\n  'worklet';\n  const previousAnimation = mutable._animation;\n  if (previousAnimation) {\n    previousAnimation.cancelled = true;\n    mutable._animation = null;\n  }\n  if (\n    typeof value === 'function' ||\n    (value !== null &&\n      typeof value === 'object' &&\n      // TODO TYPESCRIPT fix this after fixing AnimationObject type\n      (value as unknown as AnimationObject).onFrame !== undefined)\n  ) {\n    const animation: AnimationObject<Value> =\n      typeof value === 'function'\n        ? // TODO TYPESCRIPT fix this after fixing AnimationObject type\n          (value as () => AnimationObject<Value>)()\n        : // TODO TYPESCRIPT fix this after fixing AnimationObject type\n          (value as unknown as AnimationObject<Value>);\n    // prevent setting again to the same value\n    // and triggering the mappers that treat this value as an input\n    // this happens when the animation's target value(stored in animation.current until animation.onStart is called) is set to the same value as a current one(this._value)\n    // built in animations that are not higher order(withTiming, withSpring) hold target value in .current\n    if (\n      mutable._value === animation.current &&\n      !animation.isHigherOrder &&\n      !forceUpdate\n    ) {\n      animation.callback && animation.callback(true);\n      return;\n    }\n    // animated set\n    const initializeAnimation = (timestamp: number) => {\n      animation.onStart(animation, mutable.value, timestamp, previousAnimation);\n    };\n    const currentTimestamp =\n      global.__frameTimestamp || _getAnimationTimestamp();\n    initializeAnimation(currentTimestamp);\n\n    const step = (newTimestamp: number) => {\n      // Function `requestAnimationFrame` adds callback to an array, all the callbacks are flushed with function `__flushAnimationFrame`\n      // Usually we flush them inside function `nativeRequestAnimationFrame` and then the given timestamp is the timestamp of end of the current frame.\n      // However function `__flushAnimationFrame` may also be called inside `registerEventHandler` - then we get actual timestamp which is earlier than the end of the frame.\n\n      const timestamp =\n        newTimestamp < (animation.timestamp || 0)\n          ? animation.timestamp\n          : newTimestamp;\n\n      if (animation.cancelled) {\n        animation.callback && animation.callback(false /* finished */);\n        return;\n      }\n      const finished = animation.onFrame(animation, timestamp);\n      animation.finished = true;\n      animation.timestamp = timestamp;\n      // TODO TYPESCRIPT\n      // For now I'll assume that `animation.current` is always defined\n      // but actually need to dive into animations to understand it\n      mutable._value = animation.current!;\n      if (finished) {\n        animation.callback && animation.callback(true /* finished */);\n      } else {\n        requestAnimationFrame(step);\n      }\n    };\n\n    mutable._animation = animation;\n\n    step(currentTimestamp);\n  } else {\n    // prevent setting again to the same value\n    // and triggering the mappers that treat this value as an input\n    if (mutable._value === value && !forceUpdate) {\n      return;\n    }\n    mutable._value = value;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAGZ,OAAO,SAASA,WAAWA,CACzBC,OAAuB,EACvBC,KAAY,EAEN;EACN,SAAS;;EAAC,IAFVC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAGnB,IAAMG,iBAAiB,GAAGN,OAAO,CAACO,UAAU;EAC5C,IAAID,iBAAiB,EAAE;IACrBA,iBAAiB,CAACE,SAAS,GAAG,IAAI;IAClCR,OAAO,CAACO,UAAU,GAAG,IAAI;EAC3B;EACA,IACE,OAAON,KAAK,KAAK,UAAU,IAC1BA,KAAK,KAAK,IAAI,IACb,OAAOA,KAAK,KAAK,QAAQ,IAExBA,KAAK,CAAgCQ,OAAO,KAAKJ,SAAU,EAC9D;IACA,IAAMK,SAAiC,GACrC,OAAOT,KAAK,KAAK,UAAU,GAEtBA,KAAK,EAAmC,GAExCA,KAA2C;IAKlD,IACED,OAAO,CAACW,MAAM,KAAKD,SAAS,CAACE,OAAO,IACpC,CAACF,SAAS,CAACG,aAAa,IACxB,CAACX,WAAW,EACZ;MACAQ,SAAS,CAACI,QAAQ,IAAIJ,SAAS,CAACI,QAAQ,CAAC,IAAI,CAAC;MAC9C;IACF;IAEA,IAAMC,mBAAmB,GAAI,SAAvBA,mBAAmBA,CAAIC,SAAiB,EAAK;MACjDN,SAAS,CAACO,OAAO,CAACP,SAAS,EAAEV,OAAO,CAACC,KAAK,EAAEe,SAAS,EAAEV,iBAAiB,CAAC;IAC3E,CAAC;IACD,IAAMY,gBAAgB,GACpBC,MAAM,CAACC,gBAAgB,IAAIC,sBAAsB,EAAE;IACrDN,mBAAmB,CAACG,gBAAgB,CAAC;IAErC,IAAMI,IAAI,GAAI,SAARA,IAAIA,CAAIC,YAAoB,EAAK;MAKrC,IAAMP,SAAS,GACbO,YAAY,IAAIb,SAAS,CAACM,SAAS,IAAI,CAAC,CAAC,GACrCN,SAAS,CAACM,SAAS,GACnBO,YAAY;MAElB,IAAIb,SAAS,CAACF,SAAS,EAAE;QACvBE,SAAS,CAACI,QAAQ,IAAIJ,SAAS,CAACI,QAAQ,CAAC,KAAM,CAAe;QAC9D;MACF;MACA,IAAMU,QAAQ,GAAGd,SAAS,CAACD,OAAO,CAACC,SAAS,EAAEM,SAAS,CAAC;MACxDN,SAAS,CAACc,QAAQ,GAAG,IAAI;MACzBd,SAAS,CAACM,SAAS,GAAGA,SAAS;MAI/BhB,OAAO,CAACW,MAAM,GAAGD,SAAS,CAACE,OAAQ;MACnC,IAAIY,QAAQ,EAAE;QACZd,SAAS,CAACI,QAAQ,IAAIJ,SAAS,CAACI,QAAQ,CAAC,IAAK,CAAe;MAC/D,CAAC,MAAM;QACLW,qBAAqB,CAACH,IAAI,CAAC;MAC7B;IACF,CAAC;IAEDtB,OAAO,CAACO,UAAU,GAAGG,SAAS;IAE9BY,IAAI,CAACJ,gBAAgB,CAAC;EACxB,CAAC,MAAM;IAGL,IAAIlB,OAAO,CAACW,MAAM,KAAKV,KAAK,IAAI,CAACC,WAAW,EAAE;MAC5C;IACF;IACAF,OAAO,CAACW,MAAM,GAAGV,KAAK;EACxB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}