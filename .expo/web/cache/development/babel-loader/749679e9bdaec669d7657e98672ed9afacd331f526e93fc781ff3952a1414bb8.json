{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar TextToSpeech = NativeModules.TextToSpeech;\nvar Tts = function (_NativeEventEmitter) {\n  _inherits(Tts, _NativeEventEmitter);\n  var _super = _createSuper(Tts);\n  function Tts() {\n    _classCallCheck(this, Tts);\n    return _super.call(this, TextToSpeech);\n  }\n  _createClass(Tts, [{\n    key: \"getInitStatus\",\n    value: function getInitStatus() {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return Promise.resolve(true);\n      }\n      return TextToSpeech.getInitStatus();\n    }\n  }, {\n    key: \"requestInstallEngine\",\n    value: function requestInstallEngine() {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return Promise.resolve(true);\n      }\n      return TextToSpeech.requestInstallEngine();\n    }\n  }, {\n    key: \"requestInstallData\",\n    value: function requestInstallData() {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return Promise.resolve(true);\n      }\n      return TextToSpeech.requestInstallData();\n    }\n  }, {\n    key: \"setDucking\",\n    value: function setDucking(enabled) {\n      if (Platform.OS === 'windows') {\n        return Promise.resolve(true);\n      }\n      return TextToSpeech.setDucking(enabled);\n    }\n  }, {\n    key: \"setDefaultEngine\",\n    value: function setDefaultEngine(engineName) {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return Promise.resolve(true);\n      }\n      return TextToSpeech.setDefaultEngine(engineName);\n    }\n  }, {\n    key: \"setDefaultVoice\",\n    value: function setDefaultVoice(voiceId) {\n      return TextToSpeech.setDefaultVoice(voiceId);\n    }\n  }, {\n    key: \"setDefaultRate\",\n    value: function setDefaultRate(rate, skipTransform) {\n      return TextToSpeech.setDefaultRate(rate, !!skipTransform);\n    }\n  }, {\n    key: \"setDefaultPitch\",\n    value: function setDefaultPitch(pitch) {\n      return TextToSpeech.setDefaultPitch(pitch);\n    }\n  }, {\n    key: \"setDefaultLanguage\",\n    value: function setDefaultLanguage(language) {\n      return TextToSpeech.setDefaultLanguage(language);\n    }\n  }, {\n    key: \"setIgnoreSilentSwitch\",\n    value: function setIgnoreSilentSwitch(ignoreSilentSwitch) {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return TextToSpeech.setIgnoreSilentSwitch(ignoreSilentSwitch);\n      }\n      return Promise.resolve(true);\n    }\n  }, {\n    key: \"voices\",\n    value: function voices() {\n      return TextToSpeech.voices();\n    }\n  }, {\n    key: \"engines\",\n    value: function engines() {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return Promise.resolve([]);\n      }\n      return TextToSpeech.engines();\n    }\n  }, {\n    key: \"speak\",\n    value: function speak(utterance) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof options === 'string') {\n        if (Platform.OS === 'ios') {\n          return TextToSpeech.speak(utterance, {\n            iosVoiceId: options\n          });\n        } else {\n          return TextToSpeech.speak(utterance, {});\n        }\n      } else {\n        if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n          return TextToSpeech.speak(utterance, options);\n        } else {\n          return TextToSpeech.speak(utterance, options.androidParams || {});\n        }\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(onWordBoundary) {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.stop(onWordBoundary);\n      } else {\n        return TextToSpeech.stop();\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(onWordBoundary) {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.pause(onWordBoundary);\n      }\n      return Promise.resolve(false);\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.resume();\n      }\n      return Promise.resolve(false);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      return this.addListener(type, handler);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      this.removeListener(type, handler);\n    }\n  }]);\n  return Tts;\n}(NativeEventEmitter);\nexport default new Tts();","map":{"version":3,"names":["TextToSpeech","NativeModules","Tts","_NativeEventEmitter","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","value","getInitStatus","Platform","OS","Promise","resolve","requestInstallEngine","requestInstallData","setDucking","enabled","setDefaultEngine","engineName","setDefaultVoice","voiceId","setDefaultRate","rate","skipTransform","setDefaultPitch","pitch","setDefaultLanguage","language","setIgnoreSilentSwitch","ignoreSilentSwitch","voices","engines","speak","utterance","options","arguments","length","undefined","iosVoiceId","androidParams","stop","onWordBoundary","pause","resume","addEventListener","type","handler","addListener","removeEventListener","removeListener","NativeEventEmitter"],"sources":["D:/react-native-uygulamalarÄ±m/wordbook/node_modules/react-native-tts/index.js"],"sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\nconst TextToSpeech = NativeModules.TextToSpeech;\n\nclass Tts extends NativeEventEmitter {\n  constructor() {\n    super(TextToSpeech);\n  }\n\n  getInitStatus() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.getInitStatus();\n  }\n\n  requestInstallEngine() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallEngine();\n  }\n\n  requestInstallData() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallData();\n  }\n\n  setDucking(enabled) {\n    if (Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.setDucking(enabled);\n  }\n\n  setDefaultEngine(engineName) {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.setDefaultEngine(engineName);\n  }\n\n  setDefaultVoice(voiceId) {\n    return TextToSpeech.setDefaultVoice(voiceId);\n  }\n\n  setDefaultRate(rate, skipTransform) {\n    return TextToSpeech.setDefaultRate(rate, !!skipTransform);\n  }\n\n  setDefaultPitch(pitch) {\n    return TextToSpeech.setDefaultPitch(pitch);\n  }\n\n  setDefaultLanguage(language) {\n    return TextToSpeech.setDefaultLanguage(language);\n  }\n\n  setIgnoreSilentSwitch(ignoreSilentSwitch) {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return TextToSpeech.setIgnoreSilentSwitch(ignoreSilentSwitch);\n    }\n    return Promise.resolve(true);\n  }\n\n  voices() {\n    return TextToSpeech.voices();\n  }\n\n  engines() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve([]);\n    }\n    return TextToSpeech.engines();\n  }\n\n  speak(utterance, options = {}) {\n    // compatibility with old-style voiceId argument passing\n    if (typeof options === 'string') {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.speak(utterance, { iosVoiceId: options });\n      } else {\n        return TextToSpeech.speak(utterance, {});\n      }\n    } else {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return TextToSpeech.speak(utterance, options);\n      } else {\n        return TextToSpeech.speak(utterance, options.androidParams || {});\n      }\n    }\n  }\n\n  stop(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.stop(onWordBoundary);\n    } else {\n      return TextToSpeech.stop();\n    }\n  }\n\n  pause(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.pause(onWordBoundary);\n    }\n    return Promise.resolve(false);\n  }\n\n  resume() {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.resume();\n    }\n    return Promise.resolve(false);\n  }\n\n  addEventListener(type, handler) {\n    return this.addListener(type, handler);\n  }\n\n  removeEventListener(type, handler) {\n    this.removeListener(type, handler);\n  }\n}\n\nexport default new Tts();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}