{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useEffect, useRef } from 'react';\nimport { initializeSensor, registerSensor, unregisterSensor } from \"../core\";\nimport { SensorType, IOSReferenceFrame, InterfaceOrientation } from \"../commonTypes\";\nimport { callMicrotasks } from \"../threads\";\nfunction eulerToQuaternion(pitch, roll, yaw) {\n  'worklet';\n\n  var c1 = Math.cos(pitch / 2);\n  var s1 = Math.sin(pitch / 2);\n  var c2 = Math.cos(roll / 2);\n  var s2 = Math.sin(roll / 2);\n  var c3 = Math.cos(yaw / 2);\n  var s3 = Math.sin(yaw / 2);\n  return [s1 * c2 * c3 - c1 * s2 * s3, c1 * s2 * c3 + s1 * c2 * s3, c1 * c2 * s3 + s1 * s2 * c3, c1 * c2 * c3 - s1 * s2 * s3];\n}\nfunction adjustRotationToInterfaceOrientation(data) {\n  'worklet';\n\n  var interfaceOrientation = data.interfaceOrientation,\n    pitch = data.pitch,\n    roll = data.roll,\n    yaw = data.yaw;\n  if (interfaceOrientation === InterfaceOrientation.ROTATION_90) {\n    data.pitch = roll;\n    data.roll = -pitch;\n    data.yaw = yaw - Math.PI / 2;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_270) {\n    data.pitch = -roll;\n    data.roll = pitch;\n    data.yaw = yaw + Math.PI / 2;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_180) {\n    data.pitch *= -1;\n    data.roll *= -1;\n    data.yaw *= -1;\n  }\n  var q = eulerToQuaternion(data.pitch, data.roll, data.yaw);\n  data.qx = q[0];\n  data.qy = q[1];\n  data.qz = q[2];\n  data.qw = q[3];\n  return data;\n}\nfunction adjustVectorToInterfaceOrientation(data) {\n  'worklet';\n\n  var interfaceOrientation = data.interfaceOrientation,\n    x = data.x,\n    y = data.y;\n  if (interfaceOrientation === InterfaceOrientation.ROTATION_90) {\n    data.x = -y;\n    data.y = x;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_270) {\n    data.x = y;\n    data.y = -x;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_180) {\n    data.x *= -1;\n    data.y *= -1;\n  }\n  return data;\n}\nexport function useAnimatedSensor(sensorType, userConfig) {\n  var config = _objectSpread({\n    interval: 'auto',\n    adjustToInterfaceOrientation: true,\n    iosReferenceFrame: IOSReferenceFrame.Auto\n  }, userConfig);\n  var ref = useRef({\n    sensor: initializeSensor(sensorType, config),\n    unregister: function unregister() {},\n    isAvailable: false,\n    config: config\n  });\n  useEffect(function () {\n    var newConfig = _objectSpread(_objectSpread({}, config), userConfig);\n    ref.current.sensor = initializeSensor(sensorType, newConfig);\n    var sensorData = ref.current.sensor;\n    var adjustToInterfaceOrientation = ref.current.config.adjustToInterfaceOrientation;\n    var id = registerSensor(sensorType, config, function (data) {\n      'worklet';\n\n      if (adjustToInterfaceOrientation) {\n        if (sensorType === SensorType.ROTATION) {\n          data = adjustRotationToInterfaceOrientation(data);\n        } else {\n          data = adjustVectorToInterfaceOrientation(data);\n        }\n      }\n      sensorData.value = data;\n      callMicrotasks();\n    });\n    if (id !== -1) {\n      ref.current.unregister = function () {\n        return unregisterSensor(id);\n      };\n      ref.current.isAvailable = true;\n    } else {\n      ref.current.unregister = function () {};\n      ref.current.isAvailable = false;\n    }\n    return function () {\n      ref.current.unregister();\n    };\n  }, [sensorType, userConfig]);\n  return ref.current;\n}","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","useEffect","useRef","initializeSensor","registerSensor","unregisterSensor","SensorType","IOSReferenceFrame","InterfaceOrientation","callMicrotasks","eulerToQuaternion","pitch","roll","yaw","c1","Math","cos","s1","sin","c2","s2","c3","s3","adjustRotationToInterfaceOrientation","data","interfaceOrientation","ROTATION_90","PI","ROTATION_270","ROTATION_180","q","qx","qy","qz","qw","adjustVectorToInterfaceOrientation","x","y","useAnimatedSensor","sensorType","userConfig","config","interval","adjustToInterfaceOrientation","iosReferenceFrame","Auto","ref","sensor","unregister","isAvailable","newConfig","current","sensorData","id","ROTATION","value"],"sources":["D:\\react-native-uygulamalarÄ±m\\wordbook\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useAnimatedSensor.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { initializeSensor, registerSensor, unregisterSensor } from '../core';\nimport type {\n  SensorConfig,\n  AnimatedSensor,\n  Value3D,\n  ValueRotation,\n} from '../commonTypes';\nimport {\n  SensorType,\n  IOSReferenceFrame,\n  InterfaceOrientation,\n} from '../commonTypes';\nimport { callMicrotasks } from '../threads';\n\n// euler angles are in order ZXY, z = yaw, x = pitch, y = roll\n// https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js#L237\nfunction eulerToQuaternion(pitch: number, roll: number, yaw: number) {\n  'worklet';\n  const c1 = Math.cos(pitch / 2);\n  const s1 = Math.sin(pitch / 2);\n  const c2 = Math.cos(roll / 2);\n  const s2 = Math.sin(roll / 2);\n  const c3 = Math.cos(yaw / 2);\n  const s3 = Math.sin(yaw / 2);\n\n  return [\n    s1 * c2 * c3 - c1 * s2 * s3,\n    c1 * s2 * c3 + s1 * c2 * s3,\n    c1 * c2 * s3 + s1 * s2 * c3,\n    c1 * c2 * c3 - s1 * s2 * s3,\n  ];\n}\n\nfunction adjustRotationToInterfaceOrientation(data: ValueRotation) {\n  'worklet';\n  const { interfaceOrientation, pitch, roll, yaw } = data;\n  if (interfaceOrientation === InterfaceOrientation.ROTATION_90) {\n    data.pitch = roll;\n    data.roll = -pitch;\n    data.yaw = yaw - Math.PI / 2;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_270) {\n    data.pitch = -roll;\n    data.roll = pitch;\n    data.yaw = yaw + Math.PI / 2;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_180) {\n    data.pitch *= -1;\n    data.roll *= -1;\n    data.yaw *= -1;\n  }\n\n  const q = eulerToQuaternion(data.pitch, data.roll, data.yaw);\n  data.qx = q[0];\n  data.qy = q[1];\n  data.qz = q[2];\n  data.qw = q[3];\n  return data;\n}\n\nfunction adjustVectorToInterfaceOrientation(data: Value3D) {\n  'worklet';\n  const { interfaceOrientation, x, y } = data;\n  if (interfaceOrientation === InterfaceOrientation.ROTATION_90) {\n    data.x = -y;\n    data.y = x;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_270) {\n    data.x = y;\n    data.y = -x;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_180) {\n    data.x *= -1;\n    data.y *= -1;\n  }\n  return data;\n}\n\n/**\n * Lets you create animations based on data from the device's sensors.\n *\n * @param sensorType - Type of the sensor to use. Configured with {@link SensorType} enum.\n * @param config - The sensor configuration - {@link SensorConfig}.\n * @returns An object containing the sensor measurements [shared value](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value) and a function to unregister the sensor\n * @see https://docs.swmansion.com/react-native-reanimated/docs/device/useAnimatedSensor\n */\nexport function useAnimatedSensor(\n  sensorType: SensorType.ROTATION,\n  userConfig?: Partial<SensorConfig>\n): AnimatedSensor<ValueRotation>;\nexport function useAnimatedSensor(\n  sensorType: Exclude<SensorType, SensorType.ROTATION>,\n  userConfig?: Partial<SensorConfig>\n): AnimatedSensor<Value3D>;\nexport function useAnimatedSensor(\n  sensorType: SensorType,\n  userConfig?: Partial<SensorConfig>\n): AnimatedSensor<ValueRotation> | AnimatedSensor<Value3D> {\n  const config: SensorConfig = {\n    interval: 'auto',\n    adjustToInterfaceOrientation: true,\n    iosReferenceFrame: IOSReferenceFrame.Auto,\n    ...userConfig,\n  };\n  const ref = useRef<AnimatedSensor<Value3D | ValueRotation>>({\n    sensor: initializeSensor(sensorType, config),\n    unregister: () => {\n      // NOOP\n    },\n    isAvailable: false,\n    config,\n  });\n\n  useEffect(() => {\n    const newConfig = {\n      ...config,\n      ...userConfig,\n    };\n    ref.current.sensor = initializeSensor(sensorType, newConfig);\n\n    const sensorData = ref.current.sensor;\n    const adjustToInterfaceOrientation =\n      ref.current.config.adjustToInterfaceOrientation;\n\n    const id = registerSensor(sensorType, config, (data) => {\n      'worklet';\n      if (adjustToInterfaceOrientation) {\n        if (sensorType === SensorType.ROTATION) {\n          data = adjustRotationToInterfaceOrientation(data as ValueRotation);\n        } else {\n          data = adjustVectorToInterfaceOrientation(data as Value3D);\n        }\n      }\n      sensorData.value = data;\n      callMicrotasks();\n    });\n\n    if (id !== -1) {\n      // if sensor is available\n      ref.current.unregister = () => unregisterSensor(id);\n      ref.current.isAvailable = true;\n    } else {\n      // if sensor is unavailable\n      ref.current.unregister = () => {\n        // NOOP\n      };\n      ref.current.isAvailable = false;\n    }\n\n    return () => {\n      ref.current.unregister();\n    };\n  }, [sensorType, userConfig]);\n\n  return ref.current as AnimatedSensor<ValueRotation> | AnimatedSensor<Value3D>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}