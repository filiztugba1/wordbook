{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport WordBook from \"./component/WordBook\";\nimport LoginScreen from \"./component/LoginScreen\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  var handleLogin = function handleLogin() {\n    if (username === 'demo' && password === 'demo') {\n      setIsLoggedIn(true);\n    } else {\n      setError('Kullanıcı adı veya şifre hatalı.');\n    }\n  };\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      children: isLoggedIn ? _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }) : _jsx(Stack.Screen, {\n        name: \"WordBook\",\n        component: WordBook\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","useState","StyleSheet","View","WordBook","LoginScreen","NavigationContainer","jsx","_jsx","App","_useState","_useState2","_slicedToArray","isLoggedIn","setIsLoggedIn","handleLogin","username","password","setError","children","Stack","Navigator","Screen","name","component","styles","create","container","flex"],"sources":["D:/react-native-uygulamalarım/wordbook/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport WordBook from './component/WordBook';\nimport LoginScreen from './component/LoginScreen';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const handleLogin = () => {\n    // Burada kullanıcı adı ve şifrenin kontrolü yapılabilir\n    if (username === 'demo' && password === 'demo') {\n      // Doğru kullanıcı adı ve şifre ile giriş yapılacaksa işlemler burada yapılır\n      setIsLoggedIn(true);\n    } else {\n      setError('Kullanıcı adı veya şifre hatalı.');\n    }\n  };\n\n  return (\n   \n    <NavigationContainer>\n    <Stack.Navigator>\n    {isLoggedIn ? <Stack.Screen name=\"Login\" component={LoginScreen} /> : <Stack.Screen name=\"WordBook\" component={WordBook} />}\n      \n      \n    </Stack.Navigator>\n  </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAExC,OAAOC,QAAQ;AACf,OAAOC,WAAW;AAClB,SAASC,mBAAmB,QAAQ,0BAA0B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAE/D,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAoCT,QAAQ,CAAC,KAAK,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAEhC,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IAExB,IAAIC,QAAQ,KAAK,MAAM,IAAIC,QAAQ,KAAK,MAAM,EAAE;MAE9CH,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACLI,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;EAED,OAEEV,IAAA,CAACF,mBAAmB;IAAAa,QAAA,EACpBX,IAAA,CAACY,KAAK,CAACC,SAAS;MAAAF,QAAA,EACfN,UAAU,GAAGL,IAAA,CAACY,KAAK,CAACE,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAEnB;MAAY,CAAE,CAAC,GAAGG,IAAA,CAACY,KAAK,CAACE,MAAM;QAACC,IAAI,EAAC,UAAU;QAACC,SAAS,EAAEpB;MAAS,CAAE;IAAC,CAG1G;EAAC,CACC,CAAC;AAExB;AAEA,IAAMqB,MAAM,GAAGvB,UAAU,CAACwB,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,IAAI,EAAE;EACR;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}