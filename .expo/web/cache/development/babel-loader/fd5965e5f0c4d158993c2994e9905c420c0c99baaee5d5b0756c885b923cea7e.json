{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nimport React from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Circle, G, Path, Polygon, Polyline, Rect, Svg } from \"react-native-svg\";\nimport AbstractChart from \"../AbstractChart\";\nimport { LegendItem } from \"./LegendItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar LineChart = function (_super) {\n  __extends(LineChart, _super);\n  function LineChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.label = React.createRef();\n    _this.state = {\n      scrollableDotHorizontalOffset: new Animated.Value(0)\n    };\n    _this.getColor = function (dataset, opacity) {\n      return (dataset.color || _this.props.chartConfig.color)(opacity);\n    };\n    _this.getStrokeWidth = function (dataset) {\n      return dataset.strokeWidth || _this.props.chartConfig.strokeWidth || 3;\n    };\n    _this.getDatas = function (data) {\n      return data.reduce(function (acc, item) {\n        return item.data ? __spreadArrays(acc, item.data) : acc;\n      }, []);\n    };\n    _this.getPropsForDots = function (x, i) {\n      var _a = _this.props,\n        getDotProps = _a.getDotProps,\n        chartConfig = _a.chartConfig;\n      if (typeof getDotProps === \"function\") {\n        return getDotProps(x, i);\n      }\n      var _b = chartConfig.propsForDots,\n        propsForDots = _b === void 0 ? {} : _b;\n      return __assign({\n        r: \"4\"\n      }, propsForDots);\n    };\n    _this.renderDots = function (_a) {\n      var data = _a.data,\n        width = _a.width,\n        height = _a.height,\n        paddingTop = _a.paddingTop,\n        paddingRight = _a.paddingRight,\n        onDataPointClick = _a.onDataPointClick;\n      var output = [];\n      var datas = _this.getDatas(data);\n      var baseHeight = _this.calcBaseHeight(datas, height);\n      var _b = _this.props,\n        getDotColor = _b.getDotColor,\n        _c = _b.hidePointsAtIndex,\n        hidePointsAtIndex = _c === void 0 ? [] : _c,\n        _d = _b.renderDotContent,\n        renderDotContent = _d === void 0 ? function () {\n          return null;\n        } : _d;\n      var xMax = _this.getXMaxValues(data);\n      data.forEach(function (dataset) {\n        if (dataset.withDots == false) return;\n        dataset.data.forEach(function (x, i) {\n          if (hidePointsAtIndex.includes(i)) {\n            return;\n          }\n          var cx = paddingRight + i * (width - paddingRight) / xMax;\n          var cy = (baseHeight - _this.calcHeight(x, datas, height)) / 4 * 3 + paddingTop;\n          var onPress = function onPress() {\n            if (!onDataPointClick || hidePointsAtIndex.includes(i)) {\n              return;\n            }\n            onDataPointClick({\n              index: i,\n              value: x,\n              dataset: dataset,\n              x: cx,\n              y: cy,\n              getColor: function getColor(opacity) {\n                return _this.getColor(dataset, opacity);\n              }\n            });\n          };\n          output.push(_jsx(Circle, _objectSpread({\n            cx: cx,\n            cy: cy,\n            fill: typeof getDotColor === \"function\" ? getDotColor(x, i) : _this.getColor(dataset, 0.9),\n            onPress: onPress\n          }, _this.getPropsForDots(x, i)), Math.random()), _jsx(Circle, {\n            cx: cx,\n            cy: cy,\n            r: \"14\",\n            fill: \"#fff\",\n            fillOpacity: 0,\n            onPress: onPress\n          }, Math.random()), renderDotContent({\n            x: cx,\n            y: cy,\n            index: i,\n            indexData: x\n          }));\n        });\n      });\n      return output;\n    };\n    _this.renderScrollableDot = function (_a) {\n      var data = _a.data,\n        width = _a.width,\n        height = _a.height,\n        paddingTop = _a.paddingTop,\n        paddingRight = _a.paddingRight,\n        scrollableDotHorizontalOffset = _a.scrollableDotHorizontalOffset,\n        scrollableDotFill = _a.scrollableDotFill,\n        scrollableDotStrokeColor = _a.scrollableDotStrokeColor,\n        scrollableDotStrokeWidth = _a.scrollableDotStrokeWidth,\n        scrollableDotRadius = _a.scrollableDotRadius,\n        scrollableInfoViewStyle = _a.scrollableInfoViewStyle,\n        scrollableInfoTextStyle = _a.scrollableInfoTextStyle,\n        _b = _a.scrollableInfoTextDecorator,\n        scrollableInfoTextDecorator = _b === void 0 ? function (x) {\n          return \"\" + x;\n        } : _b,\n        scrollableInfoSize = _a.scrollableInfoSize,\n        scrollableInfoOffset = _a.scrollableInfoOffset;\n      var output = [];\n      var datas = _this.getDatas(data);\n      var baseHeight = _this.calcBaseHeight(datas, height);\n      var vl = [];\n      var perData = width / data[0].data.length;\n      for (var index = 0; index < data[0].data.length; index++) {\n        vl.push(index * perData);\n      }\n      var lastIndex;\n      scrollableDotHorizontalOffset.addListener(function (value) {\n        var index = value.value / perData;\n        if (!lastIndex) {\n          lastIndex = index;\n        }\n        var abs = Math.floor(index);\n        var percent = index - abs;\n        abs = data[0].data.length - abs - 1;\n        if (index >= data[0].data.length - 1) {\n          _this.label.current.setNativeProps({\n            text: scrollableInfoTextDecorator(Math.floor(data[0].data[0]))\n          });\n        } else {\n          if (index > lastIndex) {\n            var base = data[0].data[abs];\n            var prev = data[0].data[abs - 1];\n            if (prev > base) {\n              var rest = prev - base;\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base + percent * rest))\n              });\n            } else {\n              var rest = base - prev;\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base - percent * rest))\n              });\n            }\n          } else {\n            var base = data[0].data[abs - 1];\n            var next = data[0].data[abs];\n            percent = 1 - percent;\n            if (next > base) {\n              var rest = next - base;\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base + percent * rest))\n              });\n            } else {\n              var rest = base - next;\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base - percent * rest))\n              });\n            }\n          }\n        }\n        lastIndex = index;\n      });\n      data.forEach(function (dataset) {\n        if (dataset.withScrollableDot == false) return;\n        var perData = width / dataset.data.length;\n        var values = [];\n        var yValues = [];\n        var xValues = [];\n        var yValuesLabel = [];\n        var xValuesLabel = [];\n        for (var index = 0; index < dataset.data.length; index++) {\n          values.push(index * perData);\n          var yval = (baseHeight - _this.calcHeight(dataset.data[dataset.data.length - index - 1], datas, height)) / 4 * 3 + paddingTop;\n          yValues.push(yval);\n          var xval = paddingRight + (dataset.data.length - index - 1) * (width - paddingRight) / dataset.data.length;\n          xValues.push(xval);\n          yValuesLabel.push(yval - (scrollableInfoSize.height + scrollableInfoOffset));\n          xValuesLabel.push(xval - scrollableInfoSize.width / 2);\n        }\n        var translateX = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: xValues,\n          extrapolate: \"clamp\"\n        });\n        var translateY = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: yValues,\n          extrapolate: \"clamp\"\n        });\n        var labelTranslateX = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: xValuesLabel,\n          extrapolate: \"clamp\"\n        });\n        var labelTranslateY = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: yValuesLabel,\n          extrapolate: \"clamp\"\n        });\n        output.push([_jsx(Animated.View, {\n          style: [scrollableInfoViewStyle, {\n            transform: [{\n              translateX: labelTranslateX\n            }, {\n              translateY: labelTranslateY\n            }],\n            width: scrollableInfoSize.width,\n            height: scrollableInfoSize.height\n          }],\n          children: _jsx(TextInput, {\n            onLayout: function onLayout() {\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(data[0].data[data[0].data.length - 1]))\n              });\n            },\n            style: scrollableInfoTextStyle,\n            ref: _this.label\n          })\n        }, Math.random()), _jsx(AnimatedCircle, {\n          cx: translateX,\n          cy: translateY,\n          r: scrollableDotRadius,\n          stroke: scrollableDotStrokeColor,\n          strokeWidth: scrollableDotStrokeWidth,\n          fill: scrollableDotFill\n        }, Math.random())]);\n      });\n      return output;\n    };\n    _this.renderShadow = function (_a) {\n      var width = _a.width,\n        height = _a.height,\n        paddingRight = _a.paddingRight,\n        paddingTop = _a.paddingTop,\n        data = _a.data,\n        useColorFromDataset = _a.useColorFromDataset;\n      if (_this.props.bezier) {\n        return _this.renderBezierShadow({\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data,\n          useColorFromDataset: useColorFromDataset\n        });\n      }\n      var datas = _this.getDatas(data);\n      var baseHeight = _this.calcBaseHeight(datas, height);\n      return data.map(function (dataset, index) {\n        return _jsx(Polygon, {\n          points: dataset.data.map(function (d, i) {\n            var x = paddingRight + i * (width - paddingRight) / dataset.data.length;\n            var y = (baseHeight - _this.calcHeight(d, datas, height)) / 4 * 3 + paddingTop;\n            return x + \",\" + y;\n          }).join(\" \") + (\" \" + (paddingRight + (width - paddingRight) / dataset.data.length * (dataset.data.length - 1)) + \",\" + (height / 4 * 3 + paddingTop) + \" \" + paddingRight + \",\" + (height / 4 * 3 + paddingTop)),\n          fill: \"url(#fillShadowGradientFrom\" + (useColorFromDataset ? \"_\" + index : \"\") + \")\",\n          strokeWidth: 0\n        }, index);\n      });\n    };\n    _this.renderLine = function (_a) {\n      var width = _a.width,\n        height = _a.height,\n        paddingRight = _a.paddingRight,\n        paddingTop = _a.paddingTop,\n        data = _a.data,\n        linejoinType = _a.linejoinType;\n      if (_this.props.bezier) {\n        return _this.renderBezierLine({\n          data: data,\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop\n        });\n      }\n      var output = [];\n      var datas = _this.getDatas(data);\n      var baseHeight = _this.calcBaseHeight(datas, height);\n      var xMax = _this.getXMaxValues(data);\n      var lastPoint;\n      data.forEach(function (dataset, index) {\n        var points = dataset.data.map(function (d, i) {\n          if (d === null) return lastPoint;\n          var x = i * (width - paddingRight) / xMax + paddingRight;\n          var y = (baseHeight - _this.calcHeight(d, datas, height)) / 4 * 3 + paddingTop;\n          lastPoint = x + \",\" + y;\n          return x + \",\" + y;\n        });\n        output.push(_jsx(Polyline, {\n          strokeLinejoin: linejoinType,\n          points: points.join(\" \"),\n          fill: \"none\",\n          stroke: _this.getColor(dataset, 0.2),\n          strokeWidth: _this.getStrokeWidth(dataset),\n          strokeDasharray: dataset.strokeDashArray,\n          strokeDashoffset: dataset.strokeDashOffset\n        }, index));\n      });\n      return output;\n    };\n    _this.getXMaxValues = function (data) {\n      return data.reduce(function (acc, cur) {\n        return cur.data.length > acc ? cur.data.length : acc;\n      }, 0);\n    };\n    _this.getBezierLinePoints = function (dataset, _a) {\n      var width = _a.width,\n        height = _a.height,\n        paddingRight = _a.paddingRight,\n        paddingTop = _a.paddingTop,\n        data = _a.data;\n      if (dataset.data.length === 0) {\n        return \"M0,0\";\n      }\n      var datas = _this.getDatas(data);\n      var xMax = _this.getXMaxValues(data);\n      var x = function x(i) {\n        return Math.floor(paddingRight + i * (width - paddingRight) / xMax);\n      };\n      var baseHeight = _this.calcBaseHeight(datas, height);\n      var y = function y(i) {\n        var yHeight = _this.calcHeight(dataset.data[i], datas, height);\n        return Math.floor((baseHeight - yHeight) / 4 * 3 + paddingTop);\n      };\n      return [\"M\" + x(0) + \",\" + y(0)].concat(dataset.data.slice(0, -1).map(function (_, i) {\n        var x_mid = (x(i) + x(i + 1)) / 2;\n        var y_mid = (y(i) + y(i + 1)) / 2;\n        var cp_x1 = (x_mid + x(i)) / 2;\n        var cp_x2 = (x_mid + x(i + 1)) / 2;\n        return \"Q \" + cp_x1 + \", \" + y(i) + \", \" + x_mid + \", \" + y_mid + (\" Q \" + cp_x2 + \", \" + y(i + 1) + \", \" + x(i + 1) + \", \" + y(i + 1));\n      })).join(\" \");\n    };\n    _this.renderBezierLine = function (_a) {\n      var data = _a.data,\n        width = _a.width,\n        height = _a.height,\n        paddingRight = _a.paddingRight,\n        paddingTop = _a.paddingTop;\n      return data.map(function (dataset, index) {\n        var result = _this.getBezierLinePoints(dataset, {\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data\n        });\n        return _jsx(Path, {\n          d: result,\n          fill: \"none\",\n          stroke: _this.getColor(dataset, 0.2),\n          strokeWidth: _this.getStrokeWidth(dataset),\n          strokeDasharray: dataset.strokeDashArray,\n          strokeDashoffset: dataset.strokeDashOffset\n        }, index);\n      });\n    };\n    _this.renderBezierShadow = function (_a) {\n      var width = _a.width,\n        height = _a.height,\n        paddingRight = _a.paddingRight,\n        paddingTop = _a.paddingTop,\n        data = _a.data,\n        useColorFromDataset = _a.useColorFromDataset;\n      return data.map(function (dataset, index) {\n        var xMax = _this.getXMaxValues(data);\n        var d = _this.getBezierLinePoints(dataset, {\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data\n        }) + (\" L\" + (paddingRight + (width - paddingRight) / xMax * (dataset.data.length - 1)) + \",\" + (height / 4 * 3 + paddingTop) + \" L\" + paddingRight + \",\" + (height / 4 * 3 + paddingTop) + \" Z\");\n        return _jsx(Path, {\n          d: d,\n          fill: \"url(#fillShadowGradientFrom\" + (useColorFromDataset ? \"_\" + index : \"\") + \")\",\n          strokeWidth: 0\n        }, index);\n      });\n    };\n    _this.renderLegend = function (width, legendOffset) {\n      var _a = _this.props.data,\n        legend = _a.legend,\n        datasets = _a.datasets;\n      var baseLegendItemX = width / (legend.length + 1);\n      return legend.map(function (legendItem, i) {\n        return _jsx(G, {\n          children: _jsx(LegendItem, {\n            index: i,\n            iconColor: _this.getColor(datasets[i], 0.9),\n            baseLegendItemX: baseLegendItemX,\n            legendText: legendItem,\n            labelProps: __assign({}, _this.getPropsForLabels()),\n            legendOffset: legendOffset\n          })\n        }, Math.random());\n      });\n    };\n    return _this;\n  }\n  LineChart.prototype.render = function () {\n    var _a = this.props,\n      width = _a.width,\n      height = _a.height,\n      data = _a.data,\n      _b = _a.withScrollableDot,\n      withScrollableDot = _b === void 0 ? false : _b,\n      _c = _a.withShadow,\n      withShadow = _c === void 0 ? true : _c,\n      _d = _a.withDots,\n      withDots = _d === void 0 ? true : _d,\n      _e = _a.withInnerLines,\n      withInnerLines = _e === void 0 ? true : _e,\n      _f = _a.withOuterLines,\n      withOuterLines = _f === void 0 ? true : _f,\n      _g = _a.withHorizontalLines,\n      withHorizontalLines = _g === void 0 ? true : _g,\n      _h = _a.withVerticalLines,\n      withVerticalLines = _h === void 0 ? true : _h,\n      _j = _a.withHorizontalLabels,\n      withHorizontalLabels = _j === void 0 ? true : _j,\n      _k = _a.withVerticalLabels,\n      withVerticalLabels = _k === void 0 ? true : _k,\n      _l = _a.style,\n      style = _l === void 0 ? {} : _l,\n      decorator = _a.decorator,\n      onDataPointClick = _a.onDataPointClick,\n      _m = _a.verticalLabelRotation,\n      verticalLabelRotation = _m === void 0 ? 0 : _m,\n      _o = _a.horizontalLabelRotation,\n      horizontalLabelRotation = _o === void 0 ? 0 : _o,\n      _p = _a.formatYLabel,\n      formatYLabel = _p === void 0 ? function (yLabel) {\n        return yLabel;\n      } : _p,\n      _q = _a.formatXLabel,\n      formatXLabel = _q === void 0 ? function (xLabel) {\n        return xLabel;\n      } : _q,\n      segments = _a.segments,\n      _r = _a.transparent,\n      transparent = _r === void 0 ? false : _r,\n      chartConfig = _a.chartConfig;\n    var scrollableDotHorizontalOffset = this.state.scrollableDotHorizontalOffset;\n    var _s = data.labels,\n      labels = _s === void 0 ? [] : _s;\n    var _t = style.borderRadius,\n      borderRadius = _t === void 0 ? 0 : _t,\n      _u = style.paddingTop,\n      paddingTop = _u === void 0 ? 16 : _u,\n      _v = style.paddingRight,\n      paddingRight = _v === void 0 ? 64 : _v,\n      _w = style.margin,\n      margin = _w === void 0 ? 0 : _w,\n      _x = style.marginRight,\n      marginRight = _x === void 0 ? 0 : _x,\n      _y = style.paddingBottom,\n      paddingBottom = _y === void 0 ? 0 : _y;\n    var config = {\n      width: width,\n      height: height,\n      verticalLabelRotation: verticalLabelRotation,\n      horizontalLabelRotation: horizontalLabelRotation\n    };\n    var datas = this.getDatas(data.datasets);\n    var count = Math.min.apply(Math, datas) === Math.max.apply(Math, datas) ? 1 : 4;\n    if (segments) {\n      count = segments;\n    }\n    var legendOffset = this.props.data.legend ? height * 0.15 : 0;\n    return _jsxs(View, {\n      style: style,\n      children: [_jsxs(Svg, {\n        height: height + paddingBottom + legendOffset,\n        width: width - margin * 2 - marginRight,\n        children: [_jsx(Rect, {\n          width: \"100%\",\n          height: height + legendOffset,\n          rx: borderRadius,\n          ry: borderRadius,\n          fill: \"url(#backgroundGradient)\",\n          fillOpacity: transparent ? 0 : 1\n        }), this.props.data.legend && this.renderLegend(config.width, legendOffset), _jsxs(G, {\n          x: \"0\",\n          y: legendOffset,\n          children: [this.renderDefs(__assign(__assign(__assign({}, config), chartConfig), {\n            data: data.datasets\n          })), _jsx(G, {\n            children: withHorizontalLines && (withInnerLines ? this.renderHorizontalLines(__assign(__assign({}, config), {\n              count: count,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : withOuterLines ? this.renderHorizontalLine(__assign(__assign({}, config), {\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : null)\n          }), _jsx(G, {\n            children: withHorizontalLabels && this.renderHorizontalLabels(__assign(__assign({}, config), {\n              count: count,\n              data: datas,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              formatYLabel: formatYLabel,\n              decimalPlaces: chartConfig.decimalPlaces\n            }))\n          }), _jsx(G, {\n            children: withVerticalLines && (withInnerLines ? this.renderVerticalLines(__assign(__assign({}, config), {\n              data: data.datasets[0].data,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : withOuterLines ? this.renderVerticalLine(__assign(__assign({}, config), {\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : null)\n          }), _jsx(G, {\n            children: withVerticalLabels && this.renderVerticalLabels(__assign(__assign({}, config), {\n              labels: labels,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              formatXLabel: formatXLabel\n            }))\n          }), _jsx(G, {\n            children: this.renderLine(__assign(__assign(__assign({}, config), chartConfig), {\n              paddingRight: paddingRight,\n              paddingTop: paddingTop,\n              data: data.datasets\n            }))\n          }), _jsx(G, {\n            children: withShadow && this.renderShadow(__assign(__assign({}, config), {\n              data: data.datasets,\n              paddingRight: paddingRight,\n              paddingTop: paddingTop,\n              useColorFromDataset: chartConfig.useShadowColorFromDataset\n            }))\n          }), _jsx(G, {\n            children: withDots && this.renderDots(__assign(__assign({}, config), {\n              data: data.datasets,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              onDataPointClick: onDataPointClick\n            }))\n          }), _jsx(G, {\n            children: withScrollableDot && this.renderScrollableDot(__assign(__assign(__assign({}, config), chartConfig), {\n              data: data.datasets,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              onDataPointClick: onDataPointClick,\n              scrollableDotHorizontalOffset: scrollableDotHorizontalOffset\n            }))\n          }), _jsx(G, {\n            children: decorator && decorator(__assign(__assign({}, config), {\n              data: data.datasets,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            }))\n          })]\n        })]\n      }), withScrollableDot && _jsx(ScrollView, {\n        style: StyleSheet.absoluteFill,\n        contentContainerStyle: {\n          width: width * 2\n        },\n        showsHorizontalScrollIndicator: false,\n        scrollEventThrottle: 16,\n        onScroll: Animated.event([{\n          nativeEvent: {\n            contentOffset: {\n              x: scrollableDotHorizontalOffset\n            }\n          }\n        }], {\n          useNativeDriver: false\n        }),\n        horizontal: true,\n        bounces: false\n      })]\n    });\n  };\n  return LineChart;\n}(AbstractChart);\nexport default LineChart;","map":{"version":3,"names":["React","Animated","ScrollView","StyleSheet","TextInput","View","Circle","G","Path","Polygon","Polyline","Rect","Svg","AbstractChart","LegendItem","jsx","_jsx","jsxs","_jsxs","AnimatedCircle","createAnimatedComponent","LineChart","_super","__extends","_this","apply","arguments","label","createRef","state","scrollableDotHorizontalOffset","Value","getColor","dataset","opacity","color","props","chartConfig","getStrokeWidth","strokeWidth","getDatas","data","reduce","acc","item","__spreadArrays","getPropsForDots","x","i","_a","getDotProps","_b","propsForDots","__assign","r","renderDots","width","height","paddingTop","paddingRight","onDataPointClick","output","datas","baseHeight","calcBaseHeight","getDotColor","_c","hidePointsAtIndex","_d","renderDotContent","xMax","getXMaxValues","forEach","withDots","includes","cx","cy","calcHeight","onPress","index","value","y","push","_objectSpread","fill","Math","random","fillOpacity","indexData","renderScrollableDot","scrollableDotFill","scrollableDotStrokeColor","scrollableDotStrokeWidth","scrollableDotRadius","scrollableInfoViewStyle","scrollableInfoTextStyle","scrollableInfoTextDecorator","scrollableInfoSize","scrollableInfoOffset","vl","perData","length","lastIndex","addListener","abs","floor","percent","current","setNativeProps","text","base","prev","rest","next","withScrollableDot","values","yValues","xValues","yValuesLabel","xValuesLabel","yval","xval","translateX","interpolate","inputRange","outputRange","extrapolate","translateY","labelTranslateX","labelTranslateY","style","transform","children","onLayout","ref","stroke","renderShadow","useColorFromDataset","bezier","renderBezierShadow","map","points","d","join","renderLine","linejoinType","renderBezierLine","lastPoint","strokeLinejoin","strokeDasharray","strokeDashArray","strokeDashoffset","strokeDashOffset","cur","getBezierLinePoints","yHeight","concat","slice","_","x_mid","y_mid","cp_x1","cp_x2","result","renderLegend","legendOffset","legend","datasets","baseLegendItemX","legendItem","iconColor","legendText","labelProps","getPropsForLabels","prototype","render","withShadow","_e","withInnerLines","_f","withOuterLines","_g","withHorizontalLines","_h","withVerticalLines","_j","withHorizontalLabels","_k","withVerticalLabels","_l","decorator","_m","verticalLabelRotation","_o","horizontalLabelRotation","_p","formatYLabel","yLabel","_q","formatXLabel","xLabel","segments","_r","transparent","_s","labels","_t","borderRadius","_u","_v","_w","margin","_x","marginRight","_y","paddingBottom","config","count","min","max","rx","ry","renderDefs","renderHorizontalLines","renderHorizontalLine","renderHorizontalLabels","decimalPlaces","renderVerticalLines","renderVerticalLine","renderVerticalLabels","useShadowColorFromDataset","absoluteFill","contentContainerStyle","showsHorizontalScrollIndicator","scrollEventThrottle","onScroll","event","nativeEvent","contentOffset","useNativeDriver","horizontal","bounces"],"sources":["D:\\react-native-uygulamalarım\\wordbook\\node_modules\\react-native-chart-kit\\src\\line-chart\\LineChart.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport {\n  Animated,\n  ScrollView,\n  StyleSheet,\n  TextInput,\n  View,\n  ViewStyle\n} from \"react-native\";\nimport {\n  Circle,\n  G,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n  Svg\n} from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps\n} from \"../AbstractChart\";\nimport { ChartData, Dataset } from \"../HelperTypes\";\nimport { LegendItem } from \"./LegendItem\";\n\nlet AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport interface LineChartData extends ChartData {\n  legend?: string[];\n}\n\nexport interface LineChartProps extends AbstractChartProps {\n  /**\n   * Data for the chart.\n   *\n   * Example from [docs](https://github.com/indiespirit/react-native-chart-kit#line-chart):\n   *\n   * ```javascript\n   * const data = {\n   *   labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n   *   datasets: [{\n   *     data: [ 20, 45, 28, 80, 99, 43 ],\n   *     color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`, // optional\n   *     strokeWidth: 2 // optional\n   *   }],\n   *   legend: [\"Rainy Days\", \"Sunny Days\", \"Snowy Days\"] // optional\n   * }\n   * ```\n   */\n  data: LineChartData;\n  /**\n   * Width of the chart, use 'Dimensions' library to get the width of your screen for responsive.\n   */\n  width: number;\n  /**\n   * Height of the chart.\n   */\n  height: number;\n  /**\n   * Show dots on the line - default: True.\n   */\n  withDots?: boolean;\n  /**\n   * Show shadow for line - default: True.\n   */\n  withShadow?: boolean;\n  /**\n   * Show inner dashed lines - default: True.\n   */\n\n  withScrollableDot?: boolean;\n  withInnerLines?: boolean;\n  /**\n   * Show outer dashed lines - default: True.\n   */\n  withOuterLines?: boolean;\n  /**\n   * Show vertical lines - default: True.\n   */\n  withVerticalLines?: boolean;\n  /**\n   * Show horizontal lines - default: True.\n   */\n  withHorizontalLines?: boolean;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * Render charts from 0 not from the minimum value. - default: False.\n   */\n  fromZero?: boolean;\n  /**\n   * Prepend text to horizontal labels -- default: ''.\n   */\n  yAxisLabel?: string;\n  /**\n   * Append text to horizontal labels -- default: ''.\n   */\n  yAxisSuffix?: string;\n  /**\n   * Prepend text to vertical labels -- default: ''.\n   */\n  xAxisLabel?: string;\n  /**\n   * Configuration object for the chart, see example:\n   *\n   * ```javascript\n   * const chartConfig = {\n   *   backgroundGradientFrom: \"#1E2923\",\n   *   backgroundGradientFromOpacity: 0,\n   *   backgroundGradientTo: \"#08130D\",\n   *   backgroundGradientToOpacity: 0.5,\n   *   color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n   *   labelColor: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n   *   strokeWidth: 2, // optional, default 3\n   *   barPercentage: 0.5\n   * };\n   * ```\n   */\n  chartConfig?: AbstractChartConfig;\n\n  /**\n   * Divide axis quantity by the input number -- default: 1.\n   */\n  yAxisInterval?: number;\n\n  /**\n   * Defines if chart is transparent\n   */\n  transparent?: boolean;\n  /**\n   * This function takes a [whole bunch](https://github.com/indiespirit/react-native-chart-kit/blob/master/src/line-chart.js#L266)\n   * of stuff and can render extra elements,\n   * such as data point info or additional markup.\n   */\n  decorator?: Function;\n  /**\n   * Callback that is called when a data point is clicked.\n   */\n  onDataPointClick?: (data: {\n    index: number;\n    value: number;\n    dataset: Dataset;\n    x: number;\n    y: number;\n    getColor: (opacity: number) => string;\n  }) => void;\n  /**\n   * Style of the container view of the chart.\n   */\n  style?: Partial<ViewStyle>;\n  /**\n   * Add this prop to make the line chart smooth and curvy.\n   *\n   * [Example](https://github.com/indiespirit/react-native-chart-kit#bezier-line-chart)\n   */\n  bezier?: boolean;\n  /**\n   * Defines the dot color function that is used to calculate colors of dots in a line chart.\n   * Takes `(dataPoint, dataPointIndex)` as arguments.\n   */\n  getDotColor?: (dataPoint: any, index: number) => string;\n  /**\n   * Renders additional content for dots in a line chart.\n   * Takes `({x, y, index})` as arguments.\n   */\n  renderDotContent?: (params: {\n    x: number;\n    y: number;\n    index: number;\n    indexData: number;\n  }) => React.ReactNode;\n  /**\n   * Rotation angle of the horizontal labels - default 0 (degrees).\n   */\n  horizontalLabelRotation?: number;\n  /**\n   * Rotation angle of the vertical labels - default 0 (degrees).\n   */\n  verticalLabelRotation?: number;\n  /**\n   * Offset for Y axis labels.\n   */\n  yLabelsOffset?: number;\n  /**\n   * Offset for X axis labels.\n   */\n  xLabelsOffset?: number;\n  /**\n   * Array of indices of the data points you don't want to display.\n   */\n  hidePointsAtIndex?: number[];\n  /**\n   * This function change the format of the display value of the Y label.\n   * Takes the y value as argument and should return the desirable string.\n   */\n  formatYLabel?: (yValue: string) => string;\n  /**\n   * This function change the format of the display value of the X label.\n   * Takes the X value as argument and should return the desirable string.\n   */\n  formatXLabel?: (xValue: string) => string;\n  /**\n   * Provide props for a data point dot.\n   */\n  getDotProps?: (dataPoint: any, index: number) => object;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n}\n\ntype LineChartState = {\n  scrollableDotHorizontalOffset: Animated.Value;\n};\n\nclass LineChart extends AbstractChart<LineChartProps, LineChartState> {\n  label = React.createRef<TextInput>();\n\n  state = {\n    scrollableDotHorizontalOffset: new Animated.Value(0)\n  };\n\n  getColor = (dataset: Dataset, opacity: number) => {\n    return (dataset.color || this.props.chartConfig.color)(opacity);\n  };\n\n  getStrokeWidth = (dataset: Dataset) => {\n    return dataset.strokeWidth || this.props.chartConfig.strokeWidth || 3;\n  };\n\n  getDatas = (data: Dataset[]): number[] => {\n    return data.reduce(\n      (acc, item) => (item.data ? [...acc, ...item.data] : acc),\n      []\n    );\n  };\n\n  getPropsForDots = (x: any, i: number) => {\n    const { getDotProps, chartConfig } = this.props;\n\n    if (typeof getDotProps === \"function\") {\n      return getDotProps(x, i);\n    }\n\n    const { propsForDots = {} } = chartConfig;\n\n    return { r: \"4\", ...propsForDots };\n  };\n\n  renderDots = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    onDataPointClick\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    onDataPointClick: LineChartProps[\"onDataPointClick\"];\n  }) => {\n    const output: ReactNode[] = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    const {\n      getDotColor,\n      hidePointsAtIndex = [],\n      renderDotContent = () => {\n        return null;\n      }\n    } = this.props;\n    const xMax = this.getXMaxValues(data);\n    data.forEach(dataset => {\n      if (dataset.withDots == false) return;\n\n      dataset.data.forEach((x, i) => {\n        if (hidePointsAtIndex.includes(i)) {\n          return;\n        }\n\n        const cx = paddingRight + (i * (width - paddingRight)) / xMax;\n\n        const cy =\n          ((baseHeight - this.calcHeight(x, datas, height)) / 4) * 3 +\n          paddingTop;\n\n        const onPress = () => {\n          if (!onDataPointClick || hidePointsAtIndex.includes(i)) {\n            return;\n          }\n\n          onDataPointClick({\n            index: i,\n            value: x,\n            dataset,\n            x: cx,\n            y: cy,\n            getColor: opacity => this.getColor(dataset, opacity)\n          });\n        };\n\n        output.push(\n          <Circle\n            key={Math.random()}\n            cx={cx}\n            cy={cy}\n            fill={\n              typeof getDotColor === \"function\"\n                ? getDotColor(x, i)\n                : this.getColor(dataset, 0.9)\n            }\n            onPress={onPress}\n            {...this.getPropsForDots(x, i)}\n          />,\n          <Circle\n            key={Math.random()}\n            cx={cx}\n            cy={cy}\n            r=\"14\"\n            fill=\"#fff\"\n            fillOpacity={0}\n            onPress={onPress}\n          />,\n          renderDotContent({ x: cx, y: cy, index: i, indexData: x })\n        );\n      });\n    });\n\n    return output;\n  };\n\n  renderScrollableDot = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    scrollableDotHorizontalOffset,\n    scrollableDotFill,\n    scrollableDotStrokeColor,\n    scrollableDotStrokeWidth,\n    scrollableDotRadius,\n    scrollableInfoViewStyle,\n    scrollableInfoTextStyle,\n    scrollableInfoTextDecorator = x => `${x}`,\n    scrollableInfoSize,\n    scrollableInfoOffset\n  }: AbstractChartConfig & {\n    onDataPointClick: LineChartProps[\"onDataPointClick\"];\n    scrollableDotHorizontalOffset: Animated.Value;\n  }) => {\n    const output = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    let vl: number[] = [];\n\n    const perData = width / data[0].data.length;\n    for (let index = 0; index < data[0].data.length; index++) {\n      vl.push(index * perData);\n    }\n    let lastIndex: number;\n\n    scrollableDotHorizontalOffset.addListener(value => {\n      const index = value.value / perData;\n      if (!lastIndex) {\n        lastIndex = index;\n      }\n\n      let abs = Math.floor(index);\n      let percent = index - abs;\n      abs = data[0].data.length - abs - 1;\n\n      if (index >= data[0].data.length - 1) {\n        this.label.current.setNativeProps({\n          text: scrollableInfoTextDecorator(Math.floor(data[0].data[0]))\n        });\n      } else {\n        if (index > lastIndex) {\n          // to right\n\n          const base = data[0].data[abs];\n          const prev = data[0].data[abs - 1];\n          if (prev > base) {\n            let rest = prev - base;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base + percent * rest)\n              )\n            });\n          } else {\n            let rest = base - prev;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base - percent * rest)\n              )\n            });\n          }\n        } else {\n          // to left\n\n          const base = data[0].data[abs - 1];\n          const next = data[0].data[abs];\n          percent = 1 - percent;\n          if (next > base) {\n            let rest = next - base;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base + percent * rest)\n              )\n            });\n          } else {\n            let rest = base - next;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base - percent * rest)\n              )\n            });\n          }\n        }\n      }\n      lastIndex = index;\n    });\n\n    data.forEach(dataset => {\n      if (dataset.withScrollableDot == false) return;\n\n      const perData = width / dataset.data.length;\n      let values = [];\n      let yValues = [];\n      let xValues = [];\n\n      let yValuesLabel = [];\n      let xValuesLabel = [];\n\n      for (let index = 0; index < dataset.data.length; index++) {\n        values.push(index * perData);\n        const yval =\n          ((baseHeight -\n            this.calcHeight(\n              dataset.data[dataset.data.length - index - 1],\n              datas,\n              height\n            )) /\n            4) *\n            3 +\n          paddingTop;\n        yValues.push(yval);\n        const xval =\n          paddingRight +\n          ((dataset.data.length - index - 1) * (width - paddingRight)) /\n            dataset.data.length;\n        xValues.push(xval);\n\n        yValuesLabel.push(\n          yval - (scrollableInfoSize.height + scrollableInfoOffset)\n        );\n        xValuesLabel.push(xval - scrollableInfoSize.width / 2);\n      }\n\n      const translateX = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: xValues,\n        extrapolate: \"clamp\"\n      });\n\n      const translateY = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: yValues,\n        extrapolate: \"clamp\"\n      });\n\n      const labelTranslateX = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: xValuesLabel,\n        extrapolate: \"clamp\"\n      });\n\n      const labelTranslateY = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: yValuesLabel,\n        extrapolate: \"clamp\"\n      });\n\n      output.push([\n        <Animated.View\n          key={Math.random()}\n          style={[\n            scrollableInfoViewStyle,\n            {\n              transform: [\n                { translateX: labelTranslateX },\n                { translateY: labelTranslateY }\n              ],\n              width: scrollableInfoSize.width,\n              height: scrollableInfoSize.height\n            }\n          ]}\n        >\n          <TextInput\n            onLayout={() => {\n              this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(\n                  Math.floor(data[0].data[data[0].data.length - 1])\n                )\n              });\n            }}\n            style={scrollableInfoTextStyle}\n            ref={this.label}\n          />\n        </Animated.View>,\n        <AnimatedCircle\n          key={Math.random()}\n          cx={translateX}\n          cy={translateY}\n          r={scrollableDotRadius}\n          stroke={scrollableDotStrokeColor}\n          strokeWidth={scrollableDotStrokeWidth}\n          fill={scrollableDotFill}\n        />\n      ]);\n    });\n\n    return output;\n  };\n\n  renderShadow = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    useColorFromDataset\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    useColorFromDataset: AbstractChartConfig[\"useShadowColorFromDataset\"];\n  }) => {\n    if (this.props.bezier) {\n      return this.renderBezierShadow({\n        width,\n        height,\n        paddingRight,\n        paddingTop,\n        data,\n        useColorFromDataset\n      });\n    }\n\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    return data.map((dataset, index) => {\n      return (\n        <Polygon\n          key={index}\n          points={\n            dataset.data\n              .map((d, i) => {\n                const x =\n                  paddingRight +\n                  (i * (width - paddingRight)) / dataset.data.length;\n\n                const y =\n                  ((baseHeight - this.calcHeight(d, datas, height)) / 4) * 3 +\n                  paddingTop;\n\n                return `${x},${y}`;\n              })\n              .join(\" \") +\n            ` ${paddingRight +\n              ((width - paddingRight) / dataset.data.length) *\n                (dataset.data.length - 1)},${(height / 4) * 3 +\n              paddingTop} ${paddingRight},${(height / 4) * 3 + paddingTop}`\n          }\n          fill={`url(#fillShadowGradientFrom${\n            useColorFromDataset ? `_${index}` : \"\"\n          })`}\n          strokeWidth={0}\n        />\n      );\n    });\n  };\n\n  renderLine = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    linejoinType\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"linejoinType\"\n  >) => {\n    if (this.props.bezier) {\n      return this.renderBezierLine({\n        data,\n        width,\n        height,\n        paddingRight,\n        paddingTop\n      });\n    }\n\n    const output = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n    const xMax = this.getXMaxValues(data);\n\n    let lastPoint: string;\n\n    data.forEach((dataset, index) => {\n      const points = dataset.data.map((d, i) => {\n        if (d === null) return lastPoint;\n        const x = (i * (width - paddingRight)) / xMax + paddingRight;\n        const y =\n          ((baseHeight - this.calcHeight(d, datas, height)) / 4) * 3 +\n          paddingTop;\n        lastPoint = `${x},${y}`;\n        return `${x},${y}`;\n      });\n\n      output.push(\n        <Polyline\n          key={index}\n          strokeLinejoin={linejoinType}\n          points={points.join(\" \")}\n          fill=\"none\"\n          stroke={this.getColor(dataset, 0.2)}\n          strokeWidth={this.getStrokeWidth(dataset)}\n          strokeDasharray={dataset.strokeDashArray}\n          strokeDashoffset={dataset.strokeDashOffset}\n        />\n      );\n    });\n\n    return output;\n  };\n\n  getXMaxValues = (data: Dataset[]) => {\n    return data.reduce((acc, cur) => {\n      return cur.data.length > acc ? cur.data.length : acc;\n    }, 0);\n  };\n\n  getBezierLinePoints = (\n    dataset: Dataset,\n    {\n      width,\n      height,\n      paddingRight,\n      paddingTop,\n      data\n    }: Pick<\n      AbstractChartConfig,\n      \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"data\"\n    >\n  ) => {\n    if (dataset.data.length === 0) {\n      return \"M0,0\";\n    }\n\n    const datas = this.getDatas(data);\n    const xMax = this.getXMaxValues(data);\n\n    const x = (i: number) =>\n      Math.floor(paddingRight + (i * (width - paddingRight)) / xMax);\n\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    const y = (i: number) => {\n      const yHeight = this.calcHeight(dataset.data[i], datas, height);\n\n      return Math.floor(((baseHeight - yHeight) / 4) * 3 + paddingTop);\n    };\n\n    return [`M${x(0)},${y(0)}`]\n      .concat(\n        dataset.data.slice(0, -1).map((_, i) => {\n          const x_mid = (x(i) + x(i + 1)) / 2;\n          const y_mid = (y(i) + y(i + 1)) / 2;\n          const cp_x1 = (x_mid + x(i)) / 2;\n          const cp_x2 = (x_mid + x(i + 1)) / 2;\n          return (\n            `Q ${cp_x1}, ${y(i)}, ${x_mid}, ${y_mid}` +\n            ` Q ${cp_x2}, ${y(i + 1)}, ${x(i + 1)}, ${y(i + 1)}`\n          );\n        })\n      )\n      .join(\" \");\n  };\n\n  renderBezierLine = ({\n    data,\n    width,\n    height,\n    paddingRight,\n    paddingTop\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  >) => {\n    return data.map((dataset, index) => {\n      const result = this.getBezierLinePoints(dataset, {\n        width,\n        height,\n        paddingRight,\n        paddingTop,\n        data\n      });\n\n      return (\n        <Path\n          key={index}\n          d={result}\n          fill=\"none\"\n          stroke={this.getColor(dataset, 0.2)}\n          strokeWidth={this.getStrokeWidth(dataset)}\n          strokeDasharray={dataset.strokeDashArray}\n          strokeDashoffset={dataset.strokeDashOffset}\n        />\n      );\n    });\n  };\n\n  renderBezierShadow = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    useColorFromDataset\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    useColorFromDataset: AbstractChartConfig[\"useShadowColorFromDataset\"];\n  }) =>\n    data.map((dataset, index) => {\n      const xMax = this.getXMaxValues(data);\n      const d =\n        this.getBezierLinePoints(dataset, {\n          width,\n          height,\n          paddingRight,\n          paddingTop,\n          data\n        }) +\n        ` L${paddingRight +\n          ((width - paddingRight) / xMax) *\n            (dataset.data.length - 1)},${(height / 4) * 3 +\n          paddingTop} L${paddingRight},${(height / 4) * 3 + paddingTop} Z`;\n\n      return (\n        <Path\n          key={index}\n          d={d}\n          fill={`url(#fillShadowGradientFrom${\n            useColorFromDataset ? `_${index}` : \"\"\n          })`}\n          strokeWidth={0}\n        />\n      );\n    });\n\n  renderLegend = (width, legendOffset) => {\n    const { legend, datasets } = this.props.data;\n    const baseLegendItemX = width / (legend.length + 1);\n\n    return legend.map((legendItem, i) => (\n      <G key={Math.random()}>\n        <LegendItem\n          index={i}\n          iconColor={this.getColor(datasets[i], 0.9)}\n          baseLegendItemX={baseLegendItemX}\n          legendText={legendItem}\n          labelProps={{ ...this.getPropsForLabels() }}\n          legendOffset={legendOffset}\n        />\n      </G>\n    ));\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      data,\n      withScrollableDot = false,\n      withShadow = true,\n      withDots = true,\n      withInnerLines = true,\n      withOuterLines = true,\n      withHorizontalLines = true,\n      withVerticalLines = true,\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      style = {},\n      decorator,\n      onDataPointClick,\n      verticalLabelRotation = 0,\n      horizontalLabelRotation = 0,\n      formatYLabel = yLabel => yLabel,\n      formatXLabel = xLabel => xLabel,\n      segments,\n      transparent = false,\n      chartConfig\n    } = this.props;\n\n    const { scrollableDotHorizontalOffset } = this.state;\n    const { labels = [] } = data;\n    const {\n      borderRadius = 0,\n      paddingTop = 16,\n      paddingRight = 64,\n      margin = 0,\n      marginRight = 0,\n      paddingBottom = 0\n    } = style;\n\n    const config = {\n      width,\n      height,\n      verticalLabelRotation,\n      horizontalLabelRotation\n    };\n\n    const datas = this.getDatas(data.datasets);\n\n    let count = Math.min(...datas) === Math.max(...datas) ? 1 : 4;\n    if (segments) {\n      count = segments;\n    }\n\n    const legendOffset = this.props.data.legend ? height * 0.15 : 0;\n\n    return (\n      <View style={style}>\n        <Svg\n          height={height + (paddingBottom as number) + legendOffset}\n          width={width - (margin as number) * 2 - (marginRight as number)}\n        >\n          <Rect\n            width=\"100%\"\n            height={height + legendOffset}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n            fillOpacity={transparent ? 0 : 1}\n          />\n          {this.props.data.legend &&\n            this.renderLegend(config.width, legendOffset)}\n          <G x=\"0\" y={legendOffset}>\n            {this.renderDefs({\n              ...config,\n              ...chartConfig,\n              data: data.datasets\n            })}\n            <G>\n              {withHorizontalLines &&\n                (withInnerLines\n                  ? this.renderHorizontalLines({\n                      ...config,\n                      count: count,\n                      paddingTop,\n                      paddingRight\n                    })\n                  : withOuterLines\n                  ? this.renderHorizontalLine({\n                      ...config,\n                      paddingTop,\n                      paddingRight\n                    })\n                  : null)}\n            </G>\n            <G>\n              {withHorizontalLabels &&\n                this.renderHorizontalLabels({\n                  ...config,\n                  count: count,\n                  data: datas,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  formatYLabel,\n                  decimalPlaces: chartConfig.decimalPlaces\n                })}\n            </G>\n            <G>\n              {withVerticalLines &&\n                (withInnerLines\n                  ? this.renderVerticalLines({\n                      ...config,\n                      data: data.datasets[0].data,\n                      paddingTop: paddingTop as number,\n                      paddingRight: paddingRight as number\n                    })\n                  : withOuterLines\n                  ? this.renderVerticalLine({\n                      ...config,\n                      paddingTop: paddingTop as number,\n                      paddingRight: paddingRight as number\n                    })\n                  : null)}\n            </G>\n            <G>\n              {withVerticalLabels &&\n                this.renderVerticalLabels({\n                  ...config,\n                  labels,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  formatXLabel\n                })}\n            </G>\n            <G>\n              {this.renderLine({\n                ...config,\n                ...chartConfig,\n                paddingRight: paddingRight as number,\n                paddingTop: paddingTop as number,\n                data: data.datasets\n              })}\n            </G>\n            <G>\n              {withShadow &&\n                this.renderShadow({\n                  ...config,\n                  data: data.datasets,\n                  paddingRight: paddingRight as number,\n                  paddingTop: paddingTop as number,\n                  useColorFromDataset: chartConfig.useShadowColorFromDataset\n                })}\n            </G>\n            <G>\n              {withDots &&\n                this.renderDots({\n                  ...config,\n                  data: data.datasets,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  onDataPointClick\n                })}\n            </G>\n            <G>\n              {withScrollableDot &&\n                this.renderScrollableDot({\n                  ...config,\n                  ...chartConfig,\n                  data: data.datasets,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  onDataPointClick,\n                  scrollableDotHorizontalOffset\n                })}\n            </G>\n            <G>\n              {decorator &&\n                decorator({\n                  ...config,\n                  data: data.datasets,\n                  paddingTop,\n                  paddingRight\n                })}\n            </G>\n          </G>\n        </Svg>\n        {withScrollableDot && (\n          <ScrollView\n            style={StyleSheet.absoluteFill}\n            contentContainerStyle={{ width: width * 2 }}\n            showsHorizontalScrollIndicator={false}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: scrollableDotHorizontalOffset }\n                }\n              }\n            ], { useNativeDriver: false }\n            )}\n            horizontal\n            bounces={false}\n          />\n        )}\n      </View>\n    );\n  }\n}\n\nexport default LineChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}