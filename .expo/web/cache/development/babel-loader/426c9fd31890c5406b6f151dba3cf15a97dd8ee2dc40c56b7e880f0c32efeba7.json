{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport ExpoDocumentPicker from \"./ExpoDocumentPicker\";\nexport function getDocumentAsync() {\n  return _getDocumentAsync.apply(this, arguments);\n}\nfunction _getDocumentAsync() {\n  _getDocumentAsync = _asyncToGenerator(function* () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? '*/*' : _ref$type,\n      _ref$copyToCacheDirec = _ref.copyToCacheDirectory,\n      copyToCacheDirectory = _ref$copyToCacheDirec === void 0 ? true : _ref$copyToCacheDirec,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n    if (typeof type === 'string') {\n      type = [type];\n    }\n    return yield ExpoDocumentPicker.getDocumentAsync({\n      type: type,\n      copyToCacheDirectory: copyToCacheDirectory,\n      multiple: multiple\n    });\n  });\n  return _getDocumentAsync.apply(this, arguments);\n}","map":{"version":3,"names":["ExpoDocumentPicker","getDocumentAsync","_getDocumentAsync","apply","arguments","_asyncToGenerator","_ref","length","undefined","_ref$type","type","_ref$copyToCacheDirec","copyToCacheDirectory","_ref$multiple","multiple"],"sources":["D:\\react-native-uygulamalarÄ±m\\wordbook\\node_modules\\expo-document-picker\\src\\index.ts"],"sourcesContent":["import ExpoDocumentPicker from './ExpoDocumentPicker';\nimport { DocumentPickerOptions, DocumentResult } from './types';\nexport { DocumentPickerOptions, DocumentResult };\n\n// @needsAudit\n/**\n * Display the system UI for choosing a document. By default, the chosen file is copied to [the app's internal cache directory](filesystem.md#filesystemcachedirectory).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * > Therefore, calling `getDocumentAsync` in `componentDidMount`, for example, will **not** work as\n * > intended. The `cancel` event will not be returned in the browser due to platform restrictions and\n * > inconsistencies across browsers.\n *\n * @return On success returns a promise that fulfils with [`DocumentResult`](#documentresult) object.\n *\n * If the user cancelled the document picking, the promise resolves to `{ type: 'cancel' }`.\n */\nexport async function getDocumentAsync({\n  type = '*/*',\n  copyToCacheDirectory = true,\n  multiple = false,\n}: DocumentPickerOptions = {}): Promise<DocumentResult> {\n  if (typeof type === 'string') {\n    type = [type] as string[];\n  }\n  return await ExpoDocumentPicker.getDocumentAsync({ type, copyToCacheDirectory, multiple });\n}\n"],"mappings":";AAAA,OAAOA,kBAAkB;AAgBzB,gBAAsBC,gBAAgBA,CAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AASrC,SAAAF,kBAAA;EAAAA,iBAAA,GAAAG,iBAAA,CATM,aAIsB;IAAA,IAAAC,IAAA,GAAAF,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAF,EAAE;MAAAK,SAAA,GAAAH,IAAA,CAH3BI,IAAI;MAAJA,IAAI,GAAAD,SAAA,cAAG,KAAK,GAAAA,SAAA;MAAAE,qBAAA,GAAAL,IAAA,CACZM,oBAAoB;MAApBA,oBAAoB,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;MAAAE,aAAA,GAAAP,IAAA,CAC3BQ,QAAQ;MAARA,QAAQ,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IAEhB,IAAI,OAAOH,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAG,CAACA,IAAI,CAAa;;IAE3B,aAAaV,kBAAkB,CAACC,gBAAgB,CAAC;MAAES,IAAI,EAAJA,IAAI;MAAEE,oBAAoB,EAApBA,oBAAoB;MAAEE,QAAQ,EAARA;IAAQ,CAAE,CAAC;EAC5F,CAAC;EAAA,OAAAZ,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}