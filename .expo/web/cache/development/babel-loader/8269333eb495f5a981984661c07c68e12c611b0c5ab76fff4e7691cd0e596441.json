{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport WordBook from \"./component/WordBook\";\nimport LoginScreen from \"./component/LoginScreen\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  var handleLogin = function handleLogin() {\n    if (username === 'demo' && password === 'demo') {\n      setIsLoggedIn(true);\n    } else {\n      setError('Kullanıcı adı veya şifre hatalı.');\n    }\n  };\n  return _jsx(NavigationContainer, {\n    children: _jsx(View, {\n      style: styles.container,\n      children: isLoggedIn ? _jsx(WordBook, {}) : _jsx(LoginScreen, {\n        handleLogin: handleLogin\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","useState","StyleSheet","View","WordBook","LoginScreen","NavigationContainer","jsx","_jsx","App","_useState","_useState2","_slicedToArray","isLoggedIn","setIsLoggedIn","handleLogin","username","password","setError","children","style","styles","container","create","flex"],"sources":["D:/react-native-uygulamalarım/wordbook/component/LoginScreen.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport WordBook from './component/WordBook';\r\nimport LoginScreen from './component/LoginScreen';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n\r\nexport default function App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const handleLogin = () => {\r\n    // Burada kullanıcı adı ve şifrenin kontrolü yapılabilir\r\n    if (username === 'demo' && password === 'demo') {\r\n      // Doğru kullanıcı adı ve şifre ile giriş yapılacaksa işlemler burada yapılır\r\n      setIsLoggedIn(true);\r\n    } else {\r\n      setError('Kullanıcı adı veya şifre hatalı.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <View style={styles.container}>\r\n        {isLoggedIn ? <WordBook /> : <LoginScreen handleLogin={handleLogin} />}\r\n      </View>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n});\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAExC,OAAOC,QAAQ;AACf,OAAOC,WAAW;AAClB,SAASC,mBAAmB,QAAQ,0BAA0B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAE/D,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAoCT,QAAQ,CAAC,KAAK,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAEhC,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IAExB,IAAIC,QAAQ,KAAK,MAAM,IAAIC,QAAQ,KAAK,MAAM,EAAE;MAE9CH,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACLI,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;EAED,OACEV,IAAA,CAACF,mBAAmB;IAAAa,QAAA,EAClBX,IAAA,CAACL,IAAI;MAACiB,KAAK,EAAEC,MAAM,CAACC,SAAU;MAAAH,QAAA,EAC3BN,UAAU,GAAGL,IAAA,CAACJ,QAAQ,IAAE,CAAC,GAAGI,IAAA,CAACH,WAAW;QAACU,WAAW,EAAEA;MAAY,CAAE;IAAC,CAClE;EAAC,CACY,CAAC;AAE1B;AAEA,IAAMM,MAAM,GAAGnB,UAAU,CAACqB,MAAM,CAAC;EAC/BD,SAAS,EAAE;IACTE,IAAI,EAAE;EACR;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}